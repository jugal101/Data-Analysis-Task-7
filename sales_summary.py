# -*- coding: utf-8 -*-
"""sales_summary.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l2HiktFrpwhEyxxvziOuRuldXb3A-15R
"""

import sqlite3
import pandas as pd
import matplotlib.pyplot as plt

def create_sample_database():
    """Create a sample SQLite database if it doesn't exist"""
    conn = sqlite3.connect('sales_data.db')
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS sales (
        id INTEGER PRIMARY KEY,
        product TEXT,
        quantity INTEGER,
        price REAL,
        sale_date TEXT
    )
    ''')

    cursor.execute("SELECT COUNT(*) FROM sales")
    if cursor.fetchone()[0] == 0:
        sample_data = [
            ('Laptop', 5, 999.99, '2023-01-15'),
            ('Phone', 10, 699.99, '2023-01-15'),
            ('Tablet', 7, 349.99, '2023-01-16'),
            ('Laptop', 3, 899.99, '2023-01-17'),
            ('Phone', 8, 649.99, '2023-01-18'),
            ('Headphones', 15, 99.99, '2023-01-19')
        ]
        cursor.executemany("INSERT INTO sales (product, quantity, price, sale_date) VALUES (?, ?, ?, ?)", sample_data)
        conn.commit()

    conn.close()

def get_sales_summary():
    """Connect to database, run queries, and display results"""
    create_sample_database()

    conn = sqlite3.connect('sales_data.db')

    query1 = """
    SELECT
        product,
        SUM(quantity) AS total_quantity,
        SUM(quantity * price) AS revenue
    FROM sales
    GROUP BY product
    ORDER BY revenue DESC
    """

    query2 = """
    SELECT
        SUM(quantity) AS total_quantity_sold,
        SUM(quantity * price) AS total_revenue
    FROM sales
    """

    df_products = pd.read_sql_query(query1, conn)
    df_totals = pd.read_sql_query(query2, conn)

    conn.close()

    print("=== Sales Summary by Product ===")
    print(df_products.to_string(index=False))
    print("\n=== Overall Sales Totals ===")
    print(f"Total Quantity Sold: {df_totals.iloc[0]['total_quantity_sold']}")
    print(f"Total Revenue: ${df_totals.iloc[0]['total_revenue']:,.2f}")

    # Create visualization
    plt.figure(figsize=(10, 6))
    df_products.plot(kind='bar', x='product', y='revenue', legend=False)
    plt.title('Revenue by Product')
    plt.ylabel('Revenue ($)')
    plt.xlabel('Product')
    plt.xticks(rotation=45)
    plt.tight_layout()

    # Save and show the chart
    plt.savefig('sales_chart.png')
    plt.show()

if __name__ == "__main__":
    get_sales_summary()